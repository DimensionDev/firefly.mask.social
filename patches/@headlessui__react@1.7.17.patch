diff --git a/dist/components/dialog/dialog.d.ts b/dist/components/dialog/dialog.d.ts
index bcc1dc7b3ea17375feb532cc8e945f0574041275..03158c3ab1031ea51b75bca395c551160cdad955 100644
--- a/dist/components/dialog/dialog.d.ts
+++ b/dist/components/dialog/dialog.d.ts
@@ -1,68 +1,121 @@
-import React, { ElementType, MutableRefObject, Ref } from 'react';
-import { Props } from '../../types.js';
-import { PropsForFeatures, HasDisplayName, RefProp } from '../../utils/render.js';
-import { ComponentDescription } from '../description/description.js';
+import React, { ElementType, MutableRefObject, Ref } from "react";
+import { Props } from "../../types.js";
+import {
+  PropsForFeatures,
+  HasDisplayName,
+  RefProp,
+} from "../../utils/render.js";
+import { ComponentDescription } from "../description/description.js";
 declare let DEFAULT_DIALOG_TAG: "div";
 interface DialogRenderPropArg {
-    open: boolean;
+  open: boolean;
 }
-type DialogPropsWeControl = 'role' | 'aria-describedby' | 'aria-labelledby' | 'aria-modal';
+type DialogPropsWeControl =
+  | "role"
+  | "aria-describedby"
+  | "aria-labelledby"
+  | "aria-modal";
 declare let DialogRenderFeatures: number;
-export type DialogProps<TTag extends ElementType> = Props<TTag, DialogRenderPropArg, DialogPropsWeControl, PropsForFeatures<typeof DialogRenderFeatures> & {
+export type DialogProps<TTag extends ElementType> = Props<
+  TTag,
+  DialogRenderPropArg,
+  DialogPropsWeControl,
+  PropsForFeatures<typeof DialogRenderFeatures> & {
     open?: boolean;
+    disableScrollLock?: boolean;
     onClose(value: boolean): void;
     initialFocus?: MutableRefObject<HTMLElement | null>;
     __demoMode?: boolean;
-}>;
-declare function DialogFn<TTag extends ElementType = typeof DEFAULT_DIALOG_TAG>(props: DialogProps<TTag>, ref: Ref<HTMLDivElement>): JSX.Element;
+  }
+>;
+declare function DialogFn<TTag extends ElementType = typeof DEFAULT_DIALOG_TAG>(
+  props: DialogProps<TTag>,
+  ref: Ref<HTMLDivElement>
+): JSX.Element;
 declare let DEFAULT_OVERLAY_TAG: "div";
 interface OverlayRenderPropArg {
-    open: boolean;
+  open: boolean;
 }
-type OverlayPropsWeControl = 'aria-hidden';
-export type DialogOverlayProps<TTag extends ElementType> = Props<TTag, OverlayRenderPropArg, OverlayPropsWeControl>;
-declare function OverlayFn<TTag extends ElementType = typeof DEFAULT_OVERLAY_TAG>(props: DialogOverlayProps<TTag>, ref: Ref<HTMLDivElement>): React.ReactElement<any, string | React.JSXElementConstructor<any>> | null;
+type OverlayPropsWeControl = "aria-hidden";
+export type DialogOverlayProps<TTag extends ElementType> = Props<
+  TTag,
+  OverlayRenderPropArg,
+  OverlayPropsWeControl
+>;
+declare function OverlayFn<
+  TTag extends ElementType = typeof DEFAULT_OVERLAY_TAG
+>(
+  props: DialogOverlayProps<TTag>,
+  ref: Ref<HTMLDivElement>
+): React.ReactElement<any, string | React.JSXElementConstructor<any>> | null;
 declare let DEFAULT_BACKDROP_TAG: "div";
 interface BackdropRenderPropArg {
-    open: boolean;
+  open: boolean;
 }
-type BackdropPropsWeControl = 'aria-hidden';
-export type DialogBackdropProps<TTag extends ElementType> = Props<TTag, BackdropRenderPropArg, BackdropPropsWeControl>;
-declare function BackdropFn<TTag extends ElementType = typeof DEFAULT_BACKDROP_TAG>(props: DialogBackdropProps<TTag>, ref: Ref<HTMLDivElement>): JSX.Element;
+type BackdropPropsWeControl = "aria-hidden";
+export type DialogBackdropProps<TTag extends ElementType> = Props<
+  TTag,
+  BackdropRenderPropArg,
+  BackdropPropsWeControl
+>;
+declare function BackdropFn<
+  TTag extends ElementType = typeof DEFAULT_BACKDROP_TAG
+>(props: DialogBackdropProps<TTag>, ref: Ref<HTMLDivElement>): JSX.Element;
 declare let DEFAULT_PANEL_TAG: "div";
 interface PanelRenderPropArg {
-    open: boolean;
+  open: boolean;
 }
-export type DialogPanelProps<TTag extends ElementType> = Props<TTag, PanelRenderPropArg>;
-declare function PanelFn<TTag extends ElementType = typeof DEFAULT_PANEL_TAG>(props: DialogPanelProps<TTag>, ref: Ref<HTMLDivElement>): React.ReactElement<any, string | React.JSXElementConstructor<any>> | null;
+export type DialogPanelProps<TTag extends ElementType> = Props<
+  TTag,
+  PanelRenderPropArg
+>;
+declare function PanelFn<TTag extends ElementType = typeof DEFAULT_PANEL_TAG>(
+  props: DialogPanelProps<TTag>,
+  ref: Ref<HTMLDivElement>
+): React.ReactElement<any, string | React.JSXElementConstructor<any>> | null;
 declare let DEFAULT_TITLE_TAG: "h2";
 interface TitleRenderPropArg {
-    open: boolean;
+  open: boolean;
 }
-export type DialogTitleProps<TTag extends ElementType> = Props<TTag, TitleRenderPropArg>;
-declare function TitleFn<TTag extends ElementType = typeof DEFAULT_TITLE_TAG>(props: DialogTitleProps<TTag>, ref: Ref<HTMLHeadingElement>): React.ReactElement<any, string | React.JSXElementConstructor<any>> | null;
+export type DialogTitleProps<TTag extends ElementType> = Props<
+  TTag,
+  TitleRenderPropArg
+>;
+declare function TitleFn<TTag extends ElementType = typeof DEFAULT_TITLE_TAG>(
+  props: DialogTitleProps<TTag>,
+  ref: Ref<HTMLHeadingElement>
+): React.ReactElement<any, string | React.JSXElementConstructor<any>> | null;
 interface ComponentDialog extends HasDisplayName {
-    <TTag extends ElementType = typeof DEFAULT_DIALOG_TAG>(props: DialogProps<TTag> & RefProp<typeof DialogFn>): JSX.Element;
+  <TTag extends ElementType = typeof DEFAULT_DIALOG_TAG>(
+    props: DialogProps<TTag> & RefProp<typeof DialogFn>
+  ): JSX.Element;
 }
 interface ComponentDialogBackdrop extends HasDisplayName {
-    <TTag extends ElementType = typeof DEFAULT_BACKDROP_TAG>(props: DialogBackdropProps<TTag> & RefProp<typeof BackdropFn>): JSX.Element;
+  <TTag extends ElementType = typeof DEFAULT_BACKDROP_TAG>(
+    props: DialogBackdropProps<TTag> & RefProp<typeof BackdropFn>
+  ): JSX.Element;
 }
 interface ComponentDialogPanel extends HasDisplayName {
-    <TTag extends ElementType = typeof DEFAULT_PANEL_TAG>(props: DialogPanelProps<TTag> & RefProp<typeof PanelFn>): JSX.Element;
+  <TTag extends ElementType = typeof DEFAULT_PANEL_TAG>(
+    props: DialogPanelProps<TTag> & RefProp<typeof PanelFn>
+  ): JSX.Element;
 }
 interface ComponentDialogOverlay extends HasDisplayName {
-    <TTag extends ElementType = typeof DEFAULT_OVERLAY_TAG>(props: DialogOverlayProps<TTag> & RefProp<typeof OverlayFn>): JSX.Element;
+  <TTag extends ElementType = typeof DEFAULT_OVERLAY_TAG>(
+    props: DialogOverlayProps<TTag> & RefProp<typeof OverlayFn>
+  ): JSX.Element;
 }
 interface ComponentDialogTitle extends HasDisplayName {
-    <TTag extends ElementType = typeof DEFAULT_TITLE_TAG>(props: DialogTitleProps<TTag> & RefProp<typeof TitleFn>): JSX.Element;
-}
-interface ComponentDialogDescription extends ComponentDescription {
+  <TTag extends ElementType = typeof DEFAULT_TITLE_TAG>(
+    props: DialogTitleProps<TTag> & RefProp<typeof TitleFn>
+  ): JSX.Element;
 }
+interface ComponentDialogDescription extends ComponentDescription {}
 export declare let Dialog: ComponentDialog & {
-    Backdrop: ComponentDialogBackdrop;
-    Panel: ComponentDialogPanel;
-    Overlay: ComponentDialogOverlay;
-    Title: ComponentDialogTitle;
-    Description: ComponentDialogDescription;
+  Backdrop: ComponentDialogBackdrop;
+  Panel: ComponentDialogPanel;
+  Overlay: ComponentDialogOverlay;
+  Title: ComponentDialogTitle;
+  Description: ComponentDialogDescription;
 };
 export {};
diff --git a/dist/components/dialog/dialog.js b/dist/components/dialog/dialog.js
index a3bfe3d030afcbd20f17aac6ce068188b816a367..b74d1ce6243860bd35bd03e0d6e6201b9349914d 100644
--- a/dist/components/dialog/dialog.js
+++ b/dist/components/dialog/dialog.js
@@ -1 +1,362 @@
-import u,{createContext as ce,createRef as De,useCallback as j,useContext as K,useEffect as w,useMemo as y,useReducer as me,useRef as Pe,useState as ye}from"react";import{match as B}from'../../utils/match.js';import{forwardRefWithAs as E,render as A,Features as V}from'../../utils/render.js';import{useSyncRefs as R}from'../../hooks/use-sync-refs.js';import{Keys as Ee}from'../keyboard.js';import{isDisabledReactIssue7711 as Ae}from'../../utils/bugs.js';import{useId as C}from'../../hooks/use-id.js';import{FocusTrap as v}from'../../components/focus-trap/focus-trap.js';import{Portal as H,useNestedPortals as Re}from'../../components/portal/portal.js';import{ForcePortalRoot as G}from'../../internal/portal-force-root.js';import{Description as Ce,useDescriptions as ve}from'../description/description.js';import{useOpenClosed as Oe,State as _}from'../../internal/open-closed.js';import{useServerHandoffComplete as be}from'../../hooks/use-server-handoff-complete.js';import{StackProvider as he,StackMessage as q}from'../../internal/stack-context.js';import{useOutsideClick as Se}from'../../hooks/use-outside-click.js';import{useOwnerDocument as Le}from'../../hooks/use-owner.js';import{useEventListener as Fe}from'../../hooks/use-event-listener.js';import{useEvent as O}from'../../hooks/use-event.js';import{useDocumentOverflowLockedEffect as ke}from'../../hooks/document-overflow/use-document-overflow.js';import{useInert as z}from'../../hooks/use-inert.js';import{useRootContainers as xe}from'../../hooks/use-root-containers.js';var _e=(o=>(o[o.Open=0]="Open",o[o.Closed=1]="Closed",o))(_e||{}),Ie=(e=>(e[e.SetTitleId=0]="SetTitleId",e))(Ie||{});let Me={[0](t,e){return t.titleId===e.id?t:{...t,titleId:e.id}}},I=ce(null);I.displayName="DialogContext";function b(t){let e=K(I);if(e===null){let o=new Error(`<${t} /> is missing a parent <Dialog /> component.`);throw Error.captureStackTrace&&Error.captureStackTrace(o,b),o}return e}function we(t,e,o=()=>[document.body]){ke(t,e,i=>{var n;return{containers:[...(n=i.containers)!=null?n:[],o]}})}function Be(t,e){return B(e.type,Me,t,e)}let He="div",Ge=V.RenderStrategy|V.Static;function Ne(t,e){var X;let o=C(),{id:i=`headlessui-dialog-${o}`,open:n,onClose:l,initialFocus:s,__demoMode:g=!1,...T}=t,[m,h]=ye(0),a=Oe();n===void 0&&a!==null&&(n=(a&_.Open)===_.Open);let D=Pe(null),Q=R(D,e),f=Le(D),N=t.hasOwnProperty("open")||a!==null,U=t.hasOwnProperty("onClose");if(!N&&!U)throw new Error("You have to provide an `open` and an `onClose` prop to the `Dialog` component.");if(!N)throw new Error("You provided an `onClose` prop to the `Dialog`, but forgot an `open` prop.");if(!U)throw new Error("You provided an `open` prop to the `Dialog`, but forgot an `onClose` prop.");if(typeof n!="boolean")throw new Error(`You provided an \`open\` prop to the \`Dialog\`, but the value is not a boolean. Received: ${n}`);if(typeof l!="function")throw new Error(`You provided an \`onClose\` prop to the \`Dialog\`, but the value is not a function. Received: ${l}`);let p=n?0:1,[S,Z]=me(Be,{titleId:null,descriptionId:null,panelRef:De()}),P=O(()=>l(!1)),W=O(r=>Z({type:0,id:r})),L=be()?g?!1:p===0:!1,F=m>1,Y=K(I)!==null,[ee,te]=Re(),{resolveContainers:M,mainTreeNodeRef:k,MainTreeNode:oe}=xe({portals:ee,defaultContainers:[(X=S.panelRef.current)!=null?X:D.current]}),re=F?"parent":"leaf",$=a!==null?(a&_.Closing)===_.Closing:!1,ne=(()=>Y||$?!1:L)(),le=j(()=>{var r,c;return(c=Array.from((r=f==null?void 0:f.querySelectorAll("body > *"))!=null?r:[]).find(d=>d.id==="headlessui-portal-root"?!1:d.contains(k.current)&&d instanceof HTMLElement))!=null?c:null},[k]);z(le,ne);let ae=(()=>F?!0:L)(),ie=j(()=>{var r,c;return(c=Array.from((r=f==null?void 0:f.querySelectorAll("[data-headlessui-portal]"))!=null?r:[]).find(d=>d.contains(k.current)&&d instanceof HTMLElement))!=null?c:null},[k]);z(ie,ae);let se=(()=>!(!L||F))();Se(M,P,se);let pe=(()=>!(F||p!==0))();Fe(f==null?void 0:f.defaultView,"keydown",r=>{pe&&(r.defaultPrevented||r.key===Ee.Escape&&(r.preventDefault(),r.stopPropagation(),P()))});let de=(()=>!($||p!==0||Y))();we(f,de,M),w(()=>{if(p!==0||!D.current)return;let r=new ResizeObserver(c=>{for(let d of c){let x=d.target.getBoundingClientRect();x.x===0&&x.y===0&&x.width===0&&x.height===0&&P()}});return r.observe(D.current),()=>r.disconnect()},[p,D,P]);let[ue,fe]=ve(),ge=y(()=>[{dialogState:p,close:P,setTitleId:W},S],[p,S,P,W]),J=y(()=>({open:p===0}),[p]),Te={ref:Q,id:i,role:"dialog","aria-modal":p===0?!0:void 0,"aria-labelledby":S.titleId,"aria-describedby":ue};return u.createElement(he,{type:"Dialog",enabled:p===0,element:D,onUpdate:O((r,c)=>{c==="Dialog"&&B(r,{[q.Add]:()=>h(d=>d+1),[q.Remove]:()=>h(d=>d-1)})})},u.createElement(G,{force:!0},u.createElement(H,null,u.createElement(I.Provider,{value:ge},u.createElement(H.Group,{target:D},u.createElement(G,{force:!1},u.createElement(fe,{slot:J,name:"Dialog.Description"},u.createElement(v,{initialFocus:s,containers:M,features:L?B(re,{parent:v.features.RestoreFocus,leaf:v.features.All&~v.features.FocusLock}):v.features.None},u.createElement(te,null,A({ourProps:Te,theirProps:T,slot:J,defaultTag:He,features:Ge,visible:p===0,name:"Dialog"}))))))))),u.createElement(oe,null))}let Ue="div";function We(t,e){let o=C(),{id:i=`headlessui-dialog-overlay-${o}`,...n}=t,[{dialogState:l,close:s}]=b("Dialog.Overlay"),g=R(e),T=O(a=>{if(a.target===a.currentTarget){if(Ae(a.currentTarget))return a.preventDefault();a.preventDefault(),a.stopPropagation(),s()}}),m=y(()=>({open:l===0}),[l]);return A({ourProps:{ref:g,id:i,"aria-hidden":!0,onClick:T},theirProps:n,slot:m,defaultTag:Ue,name:"Dialog.Overlay"})}let Ye="div";function $e(t,e){let o=C(),{id:i=`headlessui-dialog-backdrop-${o}`,...n}=t,[{dialogState:l},s]=b("Dialog.Backdrop"),g=R(e);w(()=>{if(s.panelRef.current===null)throw new Error("A <Dialog.Backdrop /> component is being used, but a <Dialog.Panel /> component is missing.")},[s.panelRef]);let T=y(()=>({open:l===0}),[l]);return u.createElement(G,{force:!0},u.createElement(H,null,A({ourProps:{ref:g,id:i,"aria-hidden":!0},theirProps:n,slot:T,defaultTag:Ye,name:"Dialog.Backdrop"})))}let Je="div";function Xe(t,e){let o=C(),{id:i=`headlessui-dialog-panel-${o}`,...n}=t,[{dialogState:l},s]=b("Dialog.Panel"),g=R(e,s.panelRef),T=y(()=>({open:l===0}),[l]),m=O(a=>{a.stopPropagation()});return A({ourProps:{ref:g,id:i,onClick:m},theirProps:n,slot:T,defaultTag:Je,name:"Dialog.Panel"})}let je="h2";function Ke(t,e){let o=C(),{id:i=`headlessui-dialog-title-${o}`,...n}=t,[{dialogState:l,setTitleId:s}]=b("Dialog.Title"),g=R(e);w(()=>(s(i),()=>s(null)),[i,s]);let T=y(()=>({open:l===0}),[l]);return A({ourProps:{ref:g,id:i},theirProps:n,slot:T,defaultTag:je,name:"Dialog.Title"})}let Ve=E(Ne),qe=E($e),ze=E(Xe),Qe=E(We),Ze=E(Ke),_t=Object.assign(Ve,{Backdrop:qe,Panel:ze,Overlay:Qe,Title:Ze,Description:Ce});export{_t as Dialog};
+import d, {
+  createContext as De,
+  createRef as me,
+  useCallback as K,
+  useContext as V,
+  useEffect as B,
+  useMemo as y,
+  useReducer as Pe,
+  useRef as ye,
+  useState as Ee,
+} from "react";
+import { match as H } from "../../utils/match.js";
+import {
+  forwardRefWithAs as A,
+  render as R,
+  Features as q,
+} from "../../utils/render.js";
+import { useSyncRefs as C } from "../../hooks/use-sync-refs.js";
+import { Keys as Ae } from "../keyboard.js";
+import { isDisabledReactIssue7711 as Re } from "../../utils/bugs.js";
+import { useId as v } from "../../hooks/use-id.js";
+import { FocusTrap as O } from "../../components/focus-trap/focus-trap.js";
+import {
+  Portal as G,
+  useNestedPortals as Ce,
+} from "../../components/portal/portal.js";
+import { ForcePortalRoot as N } from "../../internal/portal-force-root.js";
+import {
+  Description as ve,
+  useDescriptions as Oe,
+} from "../description/description.js";
+import { useOpenClosed as be, State as _ } from "../../internal/open-closed.js";
+import { useServerHandoffComplete as Se } from "../../hooks/use-server-handoff-complete.js";
+import {
+  StackProvider as he,
+  StackMessage as z,
+} from "../../internal/stack-context.js";
+import { useOutsideClick as Le } from "../../hooks/use-outside-click.js";
+import { useOwnerDocument as ke } from "../../hooks/use-owner.js";
+import { useEventListener as Fe } from "../../hooks/use-event-listener.js";
+import { useEvent as b } from "../../hooks/use-event.js";
+import { useDocumentOverflowLockedEffect as xe } from "../../hooks/document-overflow/use-document-overflow.js";
+import { useInert as Q } from "../../hooks/use-inert.js";
+import { useRootContainers as _e } from "../../hooks/use-root-containers.js";
+var Ie = ((o) => (
+    (o[(o.Open = 0)] = "Open"), (o[(o.Closed = 1)] = "Closed"), o
+  ))(Ie || {}),
+  Me = ((e) => ((e[(e.SetTitleId = 0)] = "SetTitleId"), e))(Me || {});
+let we = {
+    [0](t, e) {
+      return t.titleId === e.id ? t : { ...t, titleId: e.id };
+    },
+  },
+  I = De(null);
+I.displayName = "DialogContext";
+function S(t) {
+  let e = V(I);
+  if (e === null) {
+    let o = new Error(`<${t} /> is missing a parent <Dialog /> component.`);
+    throw (Error.captureStackTrace && Error.captureStackTrace(o, S), o);
+  }
+  return e;
+}
+function Be(t, e, o = () => [document.body]) {
+  xe(t, e, (a) => {
+    var n;
+    return { containers: [...((n = a.containers) != null ? n : []), o] };
+  });
+}
+function He(t, e) {
+  return H(e.type, we, t, e);
+}
+let Ge = "div",
+  Ne = q.RenderStrategy | q.Static;
+function Ue(t, e) {
+  var j;
+  let o = v(),
+    {
+      id: a = `headlessui-dialog-${o}`,
+      open: n,
+      onClose: l,
+      initialFocus: i,
+      __demoMode: g = !1,
+      disableScrollLock: T = !1,
+      ...m
+    } = t,
+    [M, u] = Ee(0),
+    E = be();
+  n === void 0 && E !== null && (n = (E & _.Open) === _.Open);
+  let D = ye(null),
+    Z = C(D, e),
+    f = ke(D),
+    U = t.hasOwnProperty("open") || E !== null,
+    W = t.hasOwnProperty("onClose");
+  if (!U && !W)
+    throw new Error(
+      "You have to provide an `open` and an `onClose` prop to the `Dialog` component."
+    );
+  if (!U)
+    throw new Error(
+      "You provided an `onClose` prop to the `Dialog`, but forgot an `open` prop."
+    );
+  if (!W)
+    throw new Error(
+      "You provided an `open` prop to the `Dialog`, but forgot an `onClose` prop."
+    );
+  if (typeof n != "boolean")
+    throw new Error(
+      `You provided an \`open\` prop to the \`Dialog\`, but the value is not a boolean. Received: ${n}`
+    );
+  if (typeof l != "function")
+    throw new Error(
+      `You provided an \`onClose\` prop to the \`Dialog\`, but the value is not a function. Received: ${l}`
+    );
+  let s = n ? 0 : 1,
+    [h, ee] = Pe(He, { titleId: null, descriptionId: null, panelRef: me() }),
+    P = b(() => l(!1)),
+    Y = b((r) => ee({ type: 0, id: r })),
+    L = Se() ? (g ? !1 : s === 0) : !1,
+    k = M > 1,
+    $ = V(I) !== null,
+    [te, oe] = Ce(),
+    {
+      resolveContainers: w,
+      mainTreeNodeRef: F,
+      MainTreeNode: re,
+    } = _e({
+      portals: te,
+      defaultContainers: [(j = h.panelRef.current) != null ? j : D.current],
+    }),
+    ne = k ? "parent" : "leaf",
+    J = E !== null ? (E & _.Closing) === _.Closing : !1,
+    le = (() => ($ || J ? !1 : L))(),
+    ae = K(() => {
+      var r, c;
+      return (c = Array.from(
+        (r = f == null ? void 0 : f.querySelectorAll("body > *")) != null
+          ? r
+          : []
+      ).find((p) =>
+        p.id === "headlessui-portal-root"
+          ? !1
+          : p.contains(F.current) && p instanceof HTMLElement
+      )) != null
+        ? c
+        : null;
+    }, [F]);
+  Q(ae, le);
+  let ie = (() => (k ? !0 : L))(),
+    se = K(() => {
+      var r, c;
+      return (c = Array.from(
+        (r =
+          f == null
+            ? void 0
+            : f.querySelectorAll("[data-headlessui-portal]")) != null
+          ? r
+          : []
+      ).find((p) => p.contains(F.current) && p instanceof HTMLElement)) != null
+        ? c
+        : null;
+    }, [F]);
+  Q(se, ie);
+  let pe = (() => !(!L || k))();
+  Le(w, P, pe);
+  let de = (() => !(k || s !== 0))();
+  Fe(f == null ? void 0 : f.defaultView, "keydown", (r) => {
+    de &&
+      (r.defaultPrevented ||
+        (r.key === Ae.Escape &&
+          (r.preventDefault(), r.stopPropagation(), P())));
+  });
+  let ue = (() => !(J || s !== 0 || $ || T))();
+  Be(f, ue, w),
+    B(() => {
+      if (s !== 0 || !D.current) return;
+      let r = new ResizeObserver((c) => {
+        for (let p of c) {
+          let x = p.target.getBoundingClientRect();
+          x.x === 0 && x.y === 0 && x.width === 0 && x.height === 0 && P();
+        }
+      });
+      return r.observe(D.current), () => r.disconnect();
+    }, [s, D, P]);
+  let [fe, ge] = Oe(),
+    Te = y(
+      () => [{ dialogState: s, close: P, setTitleId: Y }, h],
+      [s, h, P, Y]
+    ),
+    X = y(() => ({ open: s === 0 }), [s]),
+    ce = {
+      ref: Z,
+      id: a,
+      role: "dialog",
+      "aria-modal": s === 0 ? !0 : void 0,
+      "aria-labelledby": h.titleId,
+      "aria-describedby": fe,
+    };
+  return d.createElement(
+    he,
+    {
+      type: "Dialog",
+      enabled: s === 0,
+      element: D,
+      onUpdate: b((r, c) => {
+        c === "Dialog" &&
+          H(r, {
+            [z.Add]: () => u((p) => p + 1),
+            [z.Remove]: () => u((p) => p - 1),
+          });
+      }),
+    },
+    d.createElement(
+      N,
+      { force: !0 },
+      d.createElement(
+        G,
+        null,
+        d.createElement(
+          I.Provider,
+          { value: Te },
+          d.createElement(
+            G.Group,
+            { target: D },
+            d.createElement(
+              N,
+              { force: !1 },
+              d.createElement(
+                ge,
+                { slot: X, name: "Dialog.Description" },
+                d.createElement(
+                  O,
+                  {
+                    initialFocus: i,
+                    containers: w,
+                    features: L
+                      ? H(ne, {
+                          parent: O.features.RestoreFocus,
+                          leaf: O.features.All & ~O.features.FocusLock,
+                        })
+                      : O.features.None,
+                  },
+                  d.createElement(
+                    oe,
+                    null,
+                    R({
+                      ourProps: ce,
+                      theirProps: m,
+                      slot: X,
+                      defaultTag: Ge,
+                      features: Ne,
+                      visible: s === 0,
+                      name: "Dialog",
+                    })
+                  )
+                )
+              )
+            )
+          )
+        )
+      )
+    ),
+    d.createElement(re, null)
+  );
+}
+let We = "div";
+function Ye(t, e) {
+  let o = v(),
+    { id: a = `headlessui-dialog-overlay-${o}`, ...n } = t,
+    [{ dialogState: l, close: i }] = S("Dialog.Overlay"),
+    g = C(e),
+    T = b((u) => {
+      if (u.target === u.currentTarget) {
+        if (Re(u.currentTarget)) return u.preventDefault();
+        u.preventDefault(), u.stopPropagation(), i();
+      }
+    }),
+    m = y(() => ({ open: l === 0 }), [l]);
+  return R({
+    ourProps: { ref: g, id: a, "aria-hidden": !0, onClick: T },
+    theirProps: n,
+    slot: m,
+    defaultTag: We,
+    name: "Dialog.Overlay",
+  });
+}
+let $e = "div";
+function Je(t, e) {
+  let o = v(),
+    { id: a = `headlessui-dialog-backdrop-${o}`, ...n } = t,
+    [{ dialogState: l }, i] = S("Dialog.Backdrop"),
+    g = C(e);
+  B(() => {
+    if (i.panelRef.current === null)
+      throw new Error(
+        "A <Dialog.Backdrop /> component is being used, but a <Dialog.Panel /> component is missing."
+      );
+  }, [i.panelRef]);
+  let T = y(() => ({ open: l === 0 }), [l]);
+  return d.createElement(
+    N,
+    { force: !0 },
+    d.createElement(
+      G,
+      null,
+      R({
+        ourProps: { ref: g, id: a, "aria-hidden": !0 },
+        theirProps: n,
+        slot: T,
+        defaultTag: $e,
+        name: "Dialog.Backdrop",
+      })
+    )
+  );
+}
+let Xe = "div";
+function je(t, e) {
+  let o = v(),
+    { id: a = `headlessui-dialog-panel-${o}`, ...n } = t,
+    [{ dialogState: l }, i] = S("Dialog.Panel"),
+    g = C(e, i.panelRef),
+    T = y(() => ({ open: l === 0 }), [l]),
+    m = b((u) => {
+      u.stopPropagation();
+    });
+  return R({
+    ourProps: { ref: g, id: a, onClick: m },
+    theirProps: n,
+    slot: T,
+    defaultTag: Xe,
+    name: "Dialog.Panel",
+  });
+}
+let Ke = "h2";
+function Ve(t, e) {
+  let o = v(),
+    { id: a = `headlessui-dialog-title-${o}`, ...n } = t,
+    [{ dialogState: l, setTitleId: i }] = S("Dialog.Title"),
+    g = C(e);
+  B(() => (i(a), () => i(null)), [a, i]);
+  let T = y(() => ({ open: l === 0 }), [l]);
+  return R({
+    ourProps: { ref: g, id: a },
+    theirProps: n,
+    slot: T,
+    defaultTag: Ke,
+    name: "Dialog.Title",
+  });
+}
+let qe = A(Ue),
+  ze = A(Je),
+  Qe = A(je),
+  Ze = A(Ye),
+  et = A(Ve),
+  It = Object.assign(qe, {
+    Backdrop: ze,
+    Panel: Qe,
+    Overlay: Ze,
+    Title: et,
+    Description: ve,
+  });
+export { It as Dialog };
